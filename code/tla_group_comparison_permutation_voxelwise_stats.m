function mat_file_with_all_useful_statistics = tla_group_comparison_permutation_voxelwise_stats(P,group_contrast_vector,volume_or_surface,tla_directory_name,varargin)

% function mat_file_with_all_useful_statistics = tla_group_comparison_permutation_voxelwise_stats(P,group_contrast_vector,volume_or_surface,tla_directory_name,varargin)
% 
% Tests for significance between two groups of subjects by permuting the assignments of subjects
% to groups. 
% 
% Example Data (from Amusia experiment)
% clear P;
% usubs  = [45,49,51,53,55,57,59,71,73,75,171, 48,56,46,52,54,172,50,58,74,72,70]';
% tla_directory_name = 'amusia_vs_controls_harm_vs_noise_5mm';
% group_contrast_vector = [-1*ones(11,1); 1*ones(11,1)];
% for i = 1:22;
%     P(i).exp = 'amusia'; %#ok<*SAGROW>
%     P(i).us = usubs(i);
%     P(i).runtype = 'localizer';
%     P(i).runs = 1;
%     P(i).contrast = 'harm_vs_noise';
%     P(i).lower_level_directory_name = 'smooth500mm_grid_hand-stp-stg_1.5mm_10whitematterPCs';
% end
% volume_or_surface = 'downsampled_surface';
% varargin = {'n_perms',10e3,'sigmap'};
% tla_group_comparison_permutation_voxelwise_stats(P,group_contrast_vector,volume_or_surface,tla_directory_name,varargin{:});
% 
% Last modified by Sam Norman-Haignere on 15-06-19

% scripts directories
source_directory = strrep(which('fla_matlab.m'),'fla_matlab.m','');
addpath(genpath('/software/Freesurfer/5.3.0/matlab'));
addpath([source_directory 'export_fig']);

% number of permutations used in the first-level-analyis
% needs to match the number of permutations in fla_matlab
% permutations are generated by shuffling the order of conditions
n_perms = 10000;
if optInputs(varargin, 'n_perms')
    n_perms = varargin{optInputs(varargin, 'n_perms')+1};
end

% p-value threshold
voxel_pthresh = 3;
if optInputs(varargin, 'voxel_pthresh')
    voxel_pthresh = varargin{optInputs(varargin, 'voxel_pthresh') + 1};
end

% ensure column vector
if size(group_contrast_vector,2) > size(group_contrast_vector,1)
    group_contrast_vector = group_contrast_vector';
end

% number of surface points on the fsaverage template brain
nsurfpts = 163842;

% output files
switch volume_or_surface
    case 'volume'
        
        error('Need to setup volume analysis');
        
    case 'surface'
        
        error('Need to setup surface analysis');
        
    case 'downsampled_surface'
        
        tla_directory = [params('rootdir') 'freesurfer/fsaverage/tla_matlab/' tla_directory_name '_downsampled_hash' DataHash(P) '/'];
        if ~exist(tla_directory,'dir');
            mkdir(tla_directory);
        end
        
        % zstat
        z_file =  [tla_directory  'zstat_permutation_' num2str(n_perms) '.mat'];
        
        % zstat based on gaussian fit to the null
        z_gaussfit_file =  [tla_directory  'zstat_gaussfit_permutation_' num2str(n_perms) '.mat'];

        % p-values based on counting the number of times the null
        % distribution exceeds the measured value
        p_file =  [tla_directory  'pstat_permutation_' num2str(n_perms) '.mat'];
        p_rh_inflated_file =  [tla_directory  'rh.pstat_permutation_' num2str(n_perms) '.mgz'];
        p_lh_inflated_file =  [tla_directory  'lh.pstat_permutation_' num2str(n_perms) '.mgz'];
        
        % p-values based on gaussian fits to the null distribution
        p_gaussfit_file =  [tla_directory  'pstat_permutation_' num2str(n_perms) '_gaussfit.mat'];
        p_gaussfit_rh_inflated_file =  [tla_directory  'rh.pstat_permutation_' num2str(n_perms) '_gaussfit.mgz'];
        p_gaussfit_lh_inflated_file =  [tla_directory  'lh.pstat_permutation_' num2str(n_perms) '_gaussfit.mgz'];
        
        mat_file_with_all_useful_statistics =  [tla_directory  'all_statistics_' num2str(n_perms) '.mat'];
        
    otherwise
        error('Error in tla_permutation: volume_or_surface flag must be either "volume", "surface", or "downsampled_surface"...');
        
end

files_to_create = {z_file, z_gaussfit_file, p_file, p_rh_inflated_file, p_lh_inflated_file, p_gaussfit_file, p_gaussfit_rh_inflated_file, p_gaussfit_lh_inflated_file, mat_file_with_all_useful_statistics};
all_files_exist = true;
for i = 1:length(files_to_create);
    if ~exist(files_to_create{i},'file');
        all_files_exist = false;
    end
end

if ~all_files_exist || optInputs(varargin, 'overwrite')
    
    % read in data
    n_subjects = length(P);
    for i = 1:n_subjects
        
        % input files
        switch volume_or_surface
            case 'volume'
                
                error('Need to setup volume analysis');
                
            case 'surface'
                
                error('Need to setup surface analysis');
                
            case 'downsampled_surface'
                
                % subject id
                subjid = [P(i).exp '_us' num2str(P(i).us)];
                
                % first or second level analysis directory to use as input
                if length(P(i).runs) == 1
                    lower_level_directory = [params('rootdir') 'freesurfer/fsaverage/fla_matlab/' subjid '/' P(i).runtype '_r' num2str(P(i).runs) '/' P(i).lower_level_directory_name '_downsampled/contrasts/'];
                else
                    if length(P(i).runs) > 50
                        run_string = ['_' num2str(length(P(i).runs)) 'r-' num2str(P(i).runs(1)) '-' num2str(P(i).runs(end)) '_' DataHash(P(i).runs)];
                    else
                        run_string = ['_r' sprintf('%d',P(i).runs)];
                    end
                    lower_level_directory = [params('rootdir') 'freesurfer/fsaverage/tla_permutation/' subjid '/' P(i).runtype run_string '/' P(i).lower_level_directory_name '_downsampled/contrasts/'];
                end
                
                lower_level_cope_file = [lower_level_directory  'cope_' P(i).contrast '.mat'];
                lower_level_cope_var_file = [lower_level_directory 'cope_var_' P(i).contrast '.mat'];
                
            otherwise
                error('Error in tla_permutation: volume_or_surface flag must be either "volume", "surface", or "downsampled_surface"');
        end
        
        switch volume_or_surface
            
            case {'volume','surface'}
                % actual contrasts and variances
                x = MRIread(lower_level_cope_file);
                if i == 1
                    br = x;
                    n_voxels = numel(br.vol);
                    lower_level_cope = nan(n_subjects,n_voxels);
                    lower_level_cope_var = nan(n_subjects,n_voxels);
                    lower_level_df = nan(n_subjects,1);
                end
                lower_level_cope(i,:) = x.vol(:);
                x = MRIread(lower_level_cope_var_file);
                lower_level_cope_var(i,:) = x.vol(:);
                
                % degrees of freedom
                x = load([lower_level_directory 'df.mat']);
                lower_level_df(i) = x.df;
                
            case 'downsampled_surface'
                
                % cope
                load(lower_level_cope_file);
                if i == 1
                    n_voxels = numel(G.grid_data{1}) + numel(G.grid_data{2});
                    lower_level_cope = nan(n_subjects,n_voxels);
                    lower_level_cope_var = nan(n_subjects,n_voxels);
                    lower_level_df = nan(n_subjects,1);
                end
                lower_level_cope(i,:) = [G.grid_data{1}(:)', G.grid_data{2}(:)'];
                
                % var cope
                load(lower_level_cope_var_file);
                lower_level_cope_var(i,:) = [G.grid_data{1}(:)', G.grid_data{2}(:)'];
                
                % degrees of freedom
                x = load([lower_level_directory 'df.mat']);
                lower_level_df(i) = x.df;
                
            otherwise
                error('Error in tla_permutation: volume_or_surface flag must be either "volume", "surface" or "downsampled_surface"');
        end
        
    end
    
    % convert copes to z-statistics
    lower_level_z = nan(size(lower_level_cope));
    xi = lower_level_cope ~= 0 & lower_level_cope_var ~=0;
    lower_level_z(xi) = lower_level_cope(xi) ./ sqrt(lower_level_cope_var(xi));
    
    % group contrast z-stats
    zstat = group_contrast_vector' * lower_level_z;
    voxels_with_no_NaNs = ~isnan(zstat)';
    zstat_voxels_with_noNaNs = zstat(voxels_with_no_NaNs);

    % permuted z-stats
    permuted_subjects = Shuffle((1:n_subjects)' * ones(1,n_perms));
    permuted_contrast_vectors = group_contrast_vector(permuted_subjects);
    zstat_permuted_voxels_with_noNaNs = permuted_contrast_vectors' * lower_level_z(:,voxels_with_no_NaNs);
    
    % gaussian fits
    nullmean_voxels_with_no_NaNs = mean(zstat_permuted_voxels_with_noNaNs);
    nullstd_voxels_with_no_NaNs = std(zstat_permuted_voxels_with_noNaNs);
    zstat_gaussfit_voxels_with_no_NaNs = (zstat_voxels_with_noNaNs - nullmean_voxels_with_no_NaNs) ./ nullstd_voxels_with_no_NaNs;
    pstat_gaussfit_voxels_with_no_NaNs = 2*normcdf(-abs(zstat_gaussfit_voxels_with_no_NaNs), 0, 1);
    
    % statistics based on counts
    pstat_voxels_with_no_NaNs = mean(ones(n_perms,1)*abs(zstat_voxels_with_noNaNs) < abs(zstat_permuted_voxels_with_noNaNs)); % two-tailed
    
    % clean-up p-statistic vector
    pstat = nan(1,n_voxels);
    pstat(voxels_with_no_NaNs) = pstat_voxels_with_no_NaNs;
    pstat_gaussfit = nan(1,n_voxels);
    pstat_gaussfit(voxels_with_no_NaNs) = pstat_gaussfit_voxels_with_no_NaNs;
    zstat_gaussfit = nan(1,n_voxels);
    zstat_gaussfit(voxels_with_no_NaNs) = zstat_gaussfit_voxels_with_no_NaNs;
    nullmean = nan(1,n_voxels);
    nullmean(voxels_with_no_NaNs) = nullmean_voxels_with_no_NaNs;
    nullstd = nan(1,n_voxels);
    nullstd(voxels_with_no_NaNs) = nullstd_voxels_with_no_NaNs;
    
    % minimum p-value determined by the number of samples drawn
    pstat(pstat==0) = (1/n_perms);
    pstat_gaussfit(pstat_gaussfit==0) = min(pstat_gaussfit(pstat_gaussfit>0));
    
    % PDF and CDF of p-statistic
    figure;
    subplot(1,2,1);
    x = linspace(0,1,100);
    nx = hist(pstat(~isnan(pstat)),x);
    plot(x,nx/sum(nx));
    xlabel('P-Value'); ylabel('Proportion of Voxels');
    title('PDF of Permutation-Based P-values');
    subplot(1,2,2);
    plot(sort(pstat(~isnan(pstat))), cumsum(ones(1,length(pstat(~isnan(pstat)))))/length(pstat(~isnan(pstat))), 'k-','LineWidth',2); hold on;
    plot([0 1],[0 1],'r--','LineWidth',2);
    xlabel('P-Value'); ylabel('Cumulative Proportion of Voxels');
    title('CDF of Permutation-Based P-values');
    export_fig([tla_directory 'pstat_hist.pdf'],'-pdf','-transparent','-nocrop');
    
    switch volume_or_surface
        
        case {'volume','surface'}
            
            error('Need to setup volume/surface analysis');
            
        case 'downsampled_surface'
            
            % p-map file
            G.grid_data{1}(:) = sign(zstat(1:numel(G.grid_data{1}))) .* -log10(pstat(1:numel(G.grid_data{1})));
            G.grid_data{2}(:) = sign(zstat(numel(G.grid_data{1})+1:end)) .* -log10(pstat(numel(G.grid_data{1})+1:end));
            save(p_file, 'G');
            Gpstat = G;
                        
            % z-stat file
            G.grid_data{1}(:) = zstat(1:numel(G.grid_data{1}));
            G.grid_data{2}(:) = zstat(numel(G.grid_data{1})+1:end);
            save(z_file, 'G');
            
            % p-map based on gaussian fits file
            G.grid_data{1}(:) = sign(zstat_gaussfit(1:numel(G.grid_data{1}))) .* -log10(pstat_gaussfit(1:numel(G.grid_data{1})));
            G.grid_data{2}(:) = sign(zstat_gaussfit(numel(G.grid_data{1})+1:end)) .* -log10(pstat_gaussfit(numel(G.grid_data{1})+1:end));
            save(p_gaussfit_file, 'G');
            Gpstat_gaussfit = G;
                        
            % z-stat based on gaussian fits
            G.grid_data{1}(:) = zstat_gaussfit(1:numel(G.grid_data{1}));
            G.grid_data{2}(:) = zstat_gaussfit(numel(G.grid_data{1})+1:end);
            save(z_gaussfit_file, 'G');
            
            % p-map resampled to the inflated fsaverage brain
            hemis = {'rh','lh'};
            for j = 1:2
                p_inflated = nan(1, nsurfpts);
                p_gaussfit_inflated = nan(1, nsurfpts);
                p_inflated(G.vi{j}+1) = interp2(Gpstat.grid_x{j},Gpstat.grid_y{j} ,Gpstat.grid_data{j}, Gpstat.vras{j}(:,1), Gpstat.vras{j}(:,2), 'linear');
                p_gaussfit_inflated(G.vi{j}+1) = interp2(Gpstat_gaussfit.grid_x{j}, Gpstat_gaussfit.grid_y{j}, Gpstat_gaussfit.grid_data{j}, Gpstat_gaussfit.vras{j}(:,1), Gpstat_gaussfit.vras{j}(:,2),'linear');
                switch hemis{j}
                    case 'rh'
                        MRIwrite_surface(p_inflated, p_rh_inflated_file, 'rh');
                        MRIwrite_surface(p_gaussfit_inflated, p_gaussfit_rh_inflated_file, 'rh');
                    case 'lh'
                        MRIwrite_surface(p_inflated, p_lh_inflated_file, 'lh');
                        MRIwrite_surface(p_gaussfit_inflated, p_gaussfit_lh_inflated_file, 'lh');
                end
            end
            
        otherwise
            error('Error in tla_permutation: volume_or_surface flag must be either "volume", "surface" or "downsampled_surface"');
    end
    
    save(mat_file_with_all_useful_statistics, 'zstat', 'pstat', 'pstat_gaussfit', 'zstat_gaussfit', 'zstat_permuted_voxels_with_noNaNs', 'nullmean', 'nullstd', 'voxels_with_no_NaNs', 'nullmean_voxels_with_no_NaNs', 'nullstd_voxels_with_no_NaNs', 'permuted_subjects', 'permuted_contrast_vectors')
    
else
    
    load(mat_file_with_all_useful_statistics, 'zstat', 'pstat', 'pstat_gaussfit', 'zstat_gaussfit', 'zstat_permuted_voxels_with_noNaNs', 'nullmean', 'nullstd', 'voxels_with_no_NaNs', 'nullmean_voxels_with_no_NaNs', 'nullstd_voxels_with_no_NaNs', 'permuted_subjects', 'permuted_contrast_vectors')
    
end

% p-statistic vs z-statistic
% useful to pick cluster threshold
figure;
plot(sign(zstat_gaussfit(voxels_with_no_NaNs)) .* -log10(pstat_gaussfit(voxels_with_no_NaNs)), zstat_gaussfit(voxels_with_no_NaNs), 'ko');
ylabel('z-statistic'); xlabel('p-statistic (-log10[p])');
xL = xlim;
hold on; h = plot(xL, voxel_pthresh*[1 1], 'r--');
box off;
legend(h, 'P-value Threshold', 'Location', 'Best');
export_fig([tla_directory 'z-vs-p.pdf'],'-pdf','-transparent');

% compare p-statistics based on gaussian fits with the p-statistics based
% on counts
figure;
log10pstat = sign(zstat(voxels_with_no_NaNs)) .* -log10(pstat(voxels_with_no_NaNs));
log10pstat_gaussfit = sign(zstat_gaussfit(voxels_with_no_NaNs)) .* -log10(pstat_gaussfit(voxels_with_no_NaNs));
plot(log10pstat, log10pstat_gaussfit, 'ko');
xlabel('p-statistic (-log10[p])'); ylabel('gaussian-approximated p-statistic (-log10[p])');
bounds = [min(log10pstat_gaussfit(:)), max(log10pstat_gaussfit(:))];
xlim(bounds); ylim(bounds);
x = linspace(bounds(1),bounds(2),100);
hold on; plot(x,x,'r--');
box off;
export_fig([tla_directory 'p-gaussfit-vs-p-count.pdf'],'-pdf','-transparent');

% -- plot statistic --

if optInputs(varargin, 'sigmap')
    switch volume_or_surface
        case 'volume'
            
            error('Need to setup volume analysis');
            
        case 'surface'
            
            error('Need to setup surface analysis');
            
        case 'downsampled_surface'
            
            % plot p map on the downsampled surface
            load(p_gaussfit_file);
            figure;
            subplot(1,2,1);
            imagesc(flipud(rot90(G.grid_data{1})), [-6 6]);
            title('Right Hemi');
            subplot(1,2,2);
            imagesc(fliplr(flipud(rot90(G.grid_data{2}))), [-6 6]); %#ok<FLUDLR>
            title('Left Hemi');
            colorbar;
            
            bounds = [voxel_pthresh, 6];
            midpoint = bounds(1) + 0.5*(bounds(2) - bounds(1));
            overlay_threshold = [bounds(1), midpoint, bounds(2)];
            
            % plot map on the inflated fsaverage brain
            freeview3('fsaverage','rh','overlay',p_gaussfit_rh_inflated_file, 'overlay_threshold', overlay_threshold);
            freeview3('fsaverage','lh','overlay',p_gaussfit_lh_inflated_file, 'overlay_threshold', overlay_threshold);
            
        otherwise
            error('Error in tla_permutation: volume_or_surface flag must be either "volume", "surface", or "downsampled_surface"');
    end
end
